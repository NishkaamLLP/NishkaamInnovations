# Simple workflow for deploying static content to GitHub Pages with SVG and image optimization
name: Deploy static content to Pages with Optimization

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install SVGO
      - name: Install SVGO
        run: npm install -g svgo

      # Optimize SVG files using SVGO
      - name: Optimize SVG files
        run: svgo -f . --quiet

      # Install ImageOptim
      - name: Install ImageOptim
        run: |
          brew install imageoptim-cli

      # Optimize image files using ImageOptim
      - name: Optimize image files
        run: |
          find . -type f \( -iname \*.png -o -iname \*.jpg -o -iname \*.jpeg -o -iname \*.gif \) -exec imageoptim {} \;

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Upload entire repository
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
